import time
import random
import matplotlib.pyplot as plt

def insertion_sort(arr):
    print("Using Insertion Sort algorithm.\n")
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr

def selection_sort(arr):
    print("Using Selection Sort algorithm.\n")
    for i in range(len(arr)):
        min_index = i  # Changed from min_idx to min_index
        for j in range(i + 1, len(arr)):
            if arr[j] < arr[min_index]:
                min_index = j
        arr[i], arr[min_index] = arr[min_index], arr[i]
    return arr

def bubble_sort(arr):
    print("Using Bubble Sort algorithm.\n")
    n = len(arr)
    for i in range(n):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

def benchmark_sorting_algorithms(input_sizes):
   print("\b\bBenchmarks sorting algorithms and their runtimes..\n")
    insertion_durations = []
    selection_durations = []
    bubble_durations = []
    for size in input_sizes:
        test_data = random.sample(range(size * 10), size)

        # Insertion Sort
        begin_time = time.time()
        insertion_sort(test_data.copy())
        insertion_durations.append(time.time() - begin_time)

        # Selection Sort
        begin_time = time.time()
        selection_sort(test_data.copy())
        selection_durations.append(time.time() - begin_time)

        # Bubble Sort
        begin_time = time.time()
        bubble_sort(test_data.copy())
        bubble_durations.append(time.time() - begin_time)

    return insertion_durations, selection_durations, bubble_durations

input_sizes = [5, 10, 20, 50, 100, 200, 500, 1000, 2000, 5000, 10000, 20000, 50000]
insertion_durations, selection_durations, bubble_durations = benchmark_sorting_algorithms(input_sizes)

# Plotting
plt.figure(figsize=(10, 6))
plt.plot(input_sizes, insertion_durations, label='Insertion Sort', marker='o')
plt.plot(input_sizes, selection_durations, label='Selection Sort', marker='o')
plt.plot(input_sizes, bubble_durations, label='Bubble Sort', marker='o')
plt.xlabel('Input Size (n)')
plt.ylabel('Time (seconds)')
plt.title('Sorting Algorithm Benchmark')
plt.legend()
plt.grid(True)
plt.show()
