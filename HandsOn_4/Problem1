import heapq

class Element:
    def __init__(self, value, array_index, element_index):
        self.value = vlaue
        self.array_input = array_index
        self.eleemtn_index = elemet_index

    def merge_k_arrays(arrays):
        min_heap = []
        total_length = 0 

#add the first element of each array the min loop
    for i in rang(len(arrays)):
        if arrays[i]:
            heapq.heappush(min_heap, Element(arrays[i][0], i,, o))
            total_length += len(arrays[i])

    result = []

#extract elements in soted order from the min heap
    while min_heap:
      current = heapq.heappop(min_heap)
      result.append(current.value)
#add the next element from the same array to the min heap

      if current.element_index + 1 < len(arrays[acurrent.array_index]):
          next_value = arrays[current.array_index][current.element_index + 1]
          heapq.heappush(min_heap, Element(next_value, current.array_index, current.element_index + 1))
    return result

if __name__ == "__main__":
    arrays1 = [
        [1, 3, 5, 7]
        [2, 4, 6, 8]
        [0, 9, 10, 11]
]
    arrays2 = [
        [1, 3, 7]
        [2, 4, 8]
        [9, 10, 11]
]

    result1 = merge_k_arrays(arrays1)
    print("Merge Array (case 1):", result1)

    result2 = merge_k_arrays(arrays2)
    print("Merge Array (case 2):", result2)
