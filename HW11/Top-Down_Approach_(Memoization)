#include <vector>

using namespace std;

int DP(int W, int wt[], int val[], int n, vector<vector<int>> &dp) {
    if (n == 0 || W == 0) {
        return 0;
    }

    if (dp[n - 1][W] != -1) {
        return dp[n - 1][W];
    }

    if (wt[n - 1] > W) {
        dp[n - 1][W] = DP(W, wt, val, n - 1, dp);
    } else {
        dp[n - 1][W] = max(val[n - 1] + DP(W - wt[n - 1], wt, val, n - 1, dp), DP(W, wt, val, n - 1, dp));
    }

    return dp[n - 1][W];
}

int knapSack(int W, int wt[], int val[], int n) {
    vector<vector<int>> dp(n, vector<int>(W + 1, -1));
    return DP(W, wt, val, n, dp);
}
