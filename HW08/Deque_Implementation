class Deque:
    def __init__(self, capacity):
        self.capacity = capacity
        self.array = [None] * capacity
        self.front = -1
        self.rear = 0
        self.size = 0

    def is_empty(self):
        return self.size == 0

    def is_full(self):
        return self.size == self.capacity

    def insert_front(self, value):
        if self.is_full():
            raise Exception("Deque is full")
        if self.is_empty():
            self.front = 0
            self.rear = 0
        else:
            self.front = (self.front - 1 + self.capacity) % self.capacity
        self.array[self.front] = value
        self.size += 1

    def insert_rear(self, value):
        if self.is_full():
            raise Exception("Deque is full")
        if self.is_empty():
            self.front = 0
            self.rear = 0
        else:
            self.rear = (self.rear + 1) % self.capacity
        self.array[self.rear] = value
        self.size += 1

    def delete_front(self):
        if self.is_empty():
            raise Exception("Deque is empty")
        value = self.array[self.front]
        if self.front == self.rear:  
            self.front = -1
            self.rear = 0
        else:
            self.front = (self.front + 1) % self.capacity
        self.size -= 1
        return value

    def delete_rear(self):
        if self.is_empty():
            raise Exception("Deque is empty")
        value = self.array[self.rear]
        if self.front == self.rear:  # Only one element was present
            self.front = -1
            self.rear = 0
        else:
            self.rear = (self.rear - 1 + self.capacity) % self.capacity
        self.size -= 1
        return value

deque = Deque(5)
deque.insert_rear(10)
deque.insert_front(20)
print(deque.delete_front())  
print(deque.delete_rear())   
