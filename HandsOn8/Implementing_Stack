class Stack:
    def __init__(self, size):
        self.size = size
        self.stack = [0] * size
        self.top = -1

    def is_empty(self):
        return self.top == -1

    def is_full(self):
        return self.top == self.size - 1

    def push(self, item):
        if self.is_full():
            raise Exception("Stack Overflow")
        self.top += 1
        self.stack[self.top] = item

    def pop(self):
        if self.is_empty():
            raise Exception("Stack Underflow")
        item = self.stack[self.top]
        self.top -= 1
        return item

    def peek(self):
        if self.is_empty():
            raise Expection("Stack is empty")
        return self.stack[self.top]

class Queue:
    def __init__(self, size):
        self.size = size
        self.queue = [0] * size
        self.front = 0
        self.rear = - 1
        self.count = 0

    def is_empty(self):
        return self.count == 0
   
    def is_full(self):
        return self.count == self.size

    def enqueue(self, item):
        if self.is_full():
            raise Exception("Queue Overflow")
        self.rear = (self.rear + 1)% self.size
        self.queue[self.rear] = item
        self.count += 1

    def dequeue(self):
        if self.is_empty():
            raise Exception("Queue underflow")
        item = self.queue[self.front]

